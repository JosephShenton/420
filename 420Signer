#!/bin/bash
# SETUP VARIABLES

# COLOURS

Color_Off='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White

# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White

# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White

# Define Common Variables

action="";
app="";
mobileprovision="";
certificate="";
password="";

shortcodes=("R: Resign" "RF: Resign Folder Queue" "RA: Resign All" "UA: Update App" "AA: Add App" "AC: Add Certificate" "DC: Delete Certificate");
shortcodes_single=("R" "RF" "RA" "UA" "AA" "AC" "DC");

declare -A nameColor=()

possibleColors=(${BIBlack} ${BIRed} ${BIGreen} ${BIYellow} ${BIBlue} ${BIPurple} ${BICyan} ${BRed} ${BGreen} ${BYellow} ${BBlue} ${BPurple} ${BCyan});

nameColor=${possibleColors[$RANDOM % ${#possibleColors[@]} ]}
# Define Common Functions

validShortcodes() {
	for ((i = 0; i < ${#shortcodes[@]}; i++))
	do
	    echo -e "${BCyan}${shortcodes[$i]}${Color_Off}";
	done
}

help() {
  echo -e "${nameColor}Short Code Help:${Color_Off}";

  validShortcodes;

  printf "\n";
  echo -e "${nameColor}Usage:${Color_Off}";
  echo -e "${nameColor}./420Signer${Color_Off} \\";
  echo -e "  ${BPurple}-f${Color_Off} ${nameColor}[${Color_Off}${BCyan}${shortcodes_single[*]}${Color_Off}${nameColor}]${Color_Off} \\";
  echo -e "  ${BPurple}-a${Color_Off} ${nameColor}[${Color_Off}${BCyan}app.ipa${Color_Off}${nameColor}]${Color_Off} \\";
  echo -e "  ${BPurple}-m${Color_Off} ${nameColor}[${Color_Off}${BCyan}cert.mobileprovision${Color_Off}${nameColor}]${Color_Off} \\";
  echo -e "  ${BPurple}-c${Color_Off} ${nameColor}[${Color_Off}${BCyan}cert.p12${Color_Off}${nameColor}]${Color_Off} \\"; 
  echo -e "  ${BPurple}-p${Color_Off} ${nameColor}[${Color_Off}${BCyan}password${Color_Off}${nameColor}]${Color_Off}";
  exit 1;
}

# START UP
printf "\n\n";
echo -e "${nameColor}██╗  ██╗██████╗  ██████╗ ${Color_Off}";
echo -e "${nameColor}██║  ██║╚════██╗██╔═████╗${Color_Off}";
echo -e "${nameColor}███████║ █████╔╝██║██╔██║${Color_Off}";
echo -e "${nameColor}╚════██║██╔═══╝ ████╔╝██║${Color_Off}";
echo -e "${nameColor}     ██║███████╗╚██████╔╝${Color_Off}";
echo -e "${nameColor}     ╚═╝╚══════╝ ╚═════╝ ${Color_Off}";
echo -e "${nameColor}                         ${Color_Off}";
echo -e "${nameColor}███████╗██╗ ██████╗ ███╗   ██╗███████╗██████╗ ${Color_Off}";
echo -e "${nameColor}██╔════╝██║██╔════╝ ████╗  ██║██╔════╝██╔══██╗${Color_Off}";
echo -e "${nameColor}███████╗██║██║  ███╗██╔██╗ ██║█████╗  ██████╔╝${Color_Off}";
echo -e "${nameColor}╚════██║██║██║   ██║██║╚██╗██║██╔══╝  ██╔══██╗${Color_Off}";
echo -e "${nameColor}███████║██║╚██████╔╝██║ ╚████║███████╗██║  ██║${Color_Off}";
echo -e "${nameColor}╚══════╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝${Color_Off}";
echo -e "${nameColor}                                              ${Color_Off}";

printf "\n";
if [ $# -eq 0 ]; then
    help;
fi

# Check options

while getopts "f:a:m:c:p:" opt 
do
	case $opt in
		f )
			### Function/Action
			action=$OPTARG;;
		a )
			### App/IPA
			app=$OPTARG;;
		m )
			### Mobileprovision
			mobileprovision=$OPTARG;;
		c )
			### Certificate/P12
			certificate=$OPTARG;;
		p )
			### Certificate/P12 Password
			password=$OPTARG;;

		? )
				echo "Unknown parameter";                   
				exit 1;;	
	esac
done

### Check Validity of Selected Function/Action

if [[ ! -n $action ]]; then
	echo -e "${BIRed}Please provide a vaild action.${Color_Off}";
	echo -e "${BIYellow}Valid actions:${Color_Off}";
	validShortcodes;

	exit 1;
fi

if [[ ! " ${shortcodes_single[@]} " =~ " ${action} " ]]; then
	echo -e "${BIRed}Invalid action:${Color_Off}: ${BCyan}$action${Color_Off}";
	echo -e "${BIYellow}Valid actions:${Color_Off}";
	validShortcodes;
	exit 1;
fi

### Check Validity of App/IPA

if [[ ! -n $app ]]; then
	echo -e "${BIRed}Please provide a valid IPA Path.${Color_Off}";
	exit 1;
fi

if [ ! -f "$app" ]; then
    echo -e "${BCyan}$app${Color_Off} ${BIRed}is not a valid IPA Path.${Color_Off}";
    exit 1;
fi

if [[ ! "$app" =~ \.ipa$ ]]; then
	echo -e "${BCyan}$app${Color_Off} ${BIRed}is not a valid IPA.${Color_Off}";
	exit 1;
fi

### Check Validity of Mobileprovision

if [[ ! -n $mobileprovision ]]; then
	echo -e "${BIRed}Please provide a valid mobileprovision Path.${Color_Off}";
	exit 1;
fi

if [ ! -f "$mobileprovision" ]; then
    echo -e "${BCyan}$mobileprovision${Color_Off} ${BIRed}is not a valid mobileprovision Path.${Color_Off}";
    exit 1;
fi

if [[ ! "$mobileprovision" =~ \.mobileprovision$ ]]; then
	echo -e "${BCyan}$mobileprovision${Color_Off} ${BIRed}is not a valid mobileprovision.${Color_Off}";
	exit 1;
fi

### Check Validity of P12

if [[ ! -n $certificate ]]; then
	echo -e "${BIRed}Please provide a valid P12 Path.${Color_Off}";
	exit 1;
fi


if [ ! -f "$certificate" ]; then
    echo -e "${BCyan}$certificate${Color_Off} ${BIRed}is not a valid P12 Path.${Color_Off}";
    exit 1;
fi

if [[ ! "$certificate" =~ \.p12$ ]]; then
	echo -e "${BCyan}$certificate${Color_Off} ${BIRed}is not a valid P12.${Color_Off}";
	exit 1;
fi


### Check Validity of Password

if [[ ! -n $password ]]; then
	echo -e "${BIRed}Please provide a valid Password.${Color_Off}";
	exit 1;
fi


### Start the cool stuff


case $action in

  R)
    # Resign
    
    ;;

  RF)
    # Resign Folder
    ;;

  RA)
    # Resign All
    ;;

  UA)
    # Update App
    ;;

  AA)
    # Add App
    ;;

  AC)
    # Add Certificate
    ;;

  DC)
    # Delete Certificate
    ;;

  *)
    echo -n "unknown"
    ;;
esac
